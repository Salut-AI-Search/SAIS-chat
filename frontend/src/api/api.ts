/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetAnswerRequest
 */
export interface GetAnswerRequest {
    /**
     * 
     * @type {string}
     * @memberof GetAnswerRequest
     */
    'user_input': string;
    /**
     * 
     * @type {number}
     * @memberof GetAnswerRequest
     */
    'chat_id': number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface MessageInDB
 */
export interface MessageInDB {
    /**
     * 
     * @type {string}
     * @memberof MessageInDB
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof MessageInDB
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MessageInDB
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface MessageUpdate
 */
export interface MessageUpdate {
    /**
     * 
     * @type {string}
     * @memberof MessageUpdate
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface MessagesRequest
 */
export interface MessagesRequest {
    /**
     * 
     * @type {Array<object>}
     * @memberof MessagesRequest
     */
    'messages': Array<object>;
}
/**
 * 
 * @export
 * @interface TextRequest
 */
export interface TextRequest {
    /**
     * 
     * @type {string}
     * @memberof TextRequest
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface TextsRequest
 */
export interface TextsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof TextsRequest
     */
    'texts': Array<string>;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password_hash': string;
}
/**
 * 
 * @export
 * @interface UserInDB
 */
export interface UserInDB {
    /**
     * 
     * @type {string}
     * @memberof UserInDB
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserInDB
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof UserInDB
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface UserRegistration
 */
export interface UserRegistration {
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistration
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Chat
         * @param {string} username 
         * @param {string} vecName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatCreateChatPost: async (username: string, vecName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('createChatCreateChatPost', 'username', username)
            // verify required parameter 'vecName' is not null or undefined
            assertParamExists('createChatCreateChatPost', 'vecName', vecName)
            const localVarPath = `/create_chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (vecName !== undefined) {
                localVarQueryParameter['vec_name'] = vecName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Message
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageMessagesPost: async (messageCreate: MessageCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageCreate' is not null or undefined
            assertParamExists('createMessageMessagesPost', 'messageCreate', messageCreate)
            const localVarPath = `/messages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createUserUsersPost', 'userCreate', userCreate)
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageMessagesMessageIdDelete: async (messageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('deleteMessageMessagesMessageIdDelete', 'messageId', messageId)
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Pdf
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePdfDeletePdfFilenameDelete: async (filename: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('deletePdfDeletePdfFilenameDelete', 'filename', filename)
            const localVarPath = `/delete_pdf/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersUserIdDelete: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Response
         * @param {GetAnswerRequest} getAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponseGetResponsePost: async (getAnswerRequest: GetAnswerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getAnswerRequest' is not null or undefined
            assertParamExists('getResponseGetResponsePost', 'getAnswerRequest', getAnswerRequest)
            const localVarPath = `/get_response`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getAnswerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Task Status
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatusTaskStatusTaskIdGet: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getTaskStatusTaskStatusTaskIdGet', 'taskId', taskId)
            const localVarPath = `/task_status/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getvectorstoreslist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVectorStoresListGetVectorStoresListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getVectorStoresList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Vectorstore From Files
         * @param {string} vecName Name of the vector storage
         * @param {Array<File>} files 
         * @param {number} [chunkSize] Chunk size for text splitting
         * @param {boolean} [isPublic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVectorstoreFromFilesVectorStorageFromFilesPost: async (vecName: string, files: Array<File>, chunkSize?: number, isPublic?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vecName' is not null or undefined
            assertParamExists('getVectorstoreFromFilesVectorStorageFromFilesPost', 'vecName', vecName)
            // verify required parameter 'files' is not null or undefined
            assertParamExists('getVectorstoreFromFilesVectorStorageFromFilesPost', 'files', files)
            const localVarPath = `/vectorStorageFromFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (vecName !== undefined) {
                localVarQueryParameter['vec_name'] = vecName;
            }

            if (chunkSize !== undefined) {
                localVarQueryParameter['chunk_size'] = chunkSize;
            }

            if (isPublic !== undefined) {
                localVarQueryParameter['is_public'] = isPublic;
            }

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenTokenPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginForAccessTokenTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginForAccessTokenTokenPost', 'password', password)
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make Embedding
         * @param {TextRequest} textRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeEmbeddingEmbeddingPost: async (textRequest: TextRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textRequest' is not null or undefined
            assertParamExists('makeEmbeddingEmbeddingPost', 'textRequest', textRequest)
            const localVarPath = `/embedding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make Embeddings
         * @param {TextsRequest} textsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeEmbeddingsEmbeddingsPost: async (textsRequest: TextsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textsRequest' is not null or undefined
            assertParamExists('makeEmbeddingsEmbeddingsPost', 'textsRequest', textsRequest)
            const localVarPath = `/embeddings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make Llm Answer
         * @param {MessagesRequest} messagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeLlmAnswerLlmAnswerPost: async (messagesRequest: MessagesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messagesRequest' is not null or undefined
            assertParamExists('makeLlmAnswerLlmAnswerPost', 'messagesRequest', messagesRequest)
            const localVarPath = `/llm_answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messagesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Protected Route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteProtectedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/protected`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMessageMessagesMessageIdGet: async (messageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('readMessageMessagesMessageIdGet', 'messageId', messageId)
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserUsersUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('readUserUsersUserIdGet', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserRegistration} userRegistration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserRegisterPost: async (userRegistration: UserRegistration, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegistration' is not null or undefined
            assertParamExists('registerUserRegisterPost', 'userRegistration', userRegistration)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegistration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Message
         * @param {number} messageId 
         * @param {MessageUpdate} messageUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageMessagesMessageIdPut: async (messageId: number, messageUpdate: MessageUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('updateMessageMessagesMessageIdPut', 'messageId', messageId)
            // verify required parameter 'messageUpdate' is not null or undefined
            assertParamExists('updateMessageMessagesMessageIdPut', 'messageUpdate', messageUpdate)
            const localVarPath = `/messages/{message_id}`
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersUserIdPut: async (userId: number, userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserUsersUserIdPut', 'userId', userId)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateUserUsersUserIdPut', 'userUpdate', userUpdate)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Pdf
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPdfUploadPdfPost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadPdfUploadPdfPost', 'file', file)
            const localVarPath = `/upload_pdf/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Chat
         * @param {string} username 
         * @param {string} vecName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChatCreateChatPost(username: string, vecName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChatCreateChatPost(username, vecName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createChatCreateChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Message
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessageMessagesPost(messageCreate: MessageCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageMessagesPost(messageCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMessageMessagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsersPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUserUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessageMessagesMessageIdDelete(messageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessageMessagesMessageIdDelete(messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteMessageMessagesMessageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Pdf
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePdfDeletePdfFilenameDelete(filename: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePdfDeletePdfFilenameDelete(filename, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deletePdfDeletePdfFilenameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserUsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteUserUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Response
         * @param {GetAnswerRequest} getAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResponseGetResponsePost(getAnswerRequest: GetAnswerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResponseGetResponsePost(getAnswerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getResponseGetResponsePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Task Status
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskStatusTaskStatusTaskIdGet(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskStatusTaskStatusTaskIdGet(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTaskStatusTaskStatusTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Getvectorstoreslist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVectorStoresListGetVectorStoresListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVectorStoresListGetVectorStoresListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVectorStoresListGetVectorStoresListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Vectorstore From Files
         * @param {string} vecName Name of the vector storage
         * @param {Array<File>} files 
         * @param {number} [chunkSize] Chunk size for text splitting
         * @param {boolean} [isPublic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVectorstoreFromFilesVectorStorageFromFilesPost(vecName: string, files: Array<File>, chunkSize?: number, isPublic?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVectorstoreFromFilesVectorStorageFromFilesPost(vecName, files, chunkSize, isPublic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getVectorstoreFromFilesVectorStorageFromFilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForAccessTokenTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForAccessTokenTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginForAccessTokenTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Make Embedding
         * @param {TextRequest} textRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeEmbeddingEmbeddingPost(textRequest: TextRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeEmbeddingEmbeddingPost(textRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.makeEmbeddingEmbeddingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Make Embeddings
         * @param {TextsRequest} textsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeEmbeddingsEmbeddingsPost(textsRequest: TextsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeEmbeddingsEmbeddingsPost(textsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.makeEmbeddingsEmbeddingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Make Llm Answer
         * @param {MessagesRequest} messagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeLlmAnswerLlmAnswerPost(messagesRequest: MessagesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeLlmAnswerLlmAnswerPost(messagesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.makeLlmAnswerLlmAnswerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Protected Route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async protectedRouteProtectedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.protectedRouteProtectedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.protectedRouteProtectedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMessageMessagesMessageIdGet(messageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMessageMessagesMessageIdGet(messageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMessageMessagesMessageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUserUsersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readUserUsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register User
         * @param {UserRegistration} userRegistration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUserRegisterPost(userRegistration: UserRegistration, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUserRegisterPost(userRegistration, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerUserRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Message
         * @param {number} messageId 
         * @param {MessageUpdate} messageUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessageMessagesMessageIdPut(messageId: number, messageUpdate: MessageUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessageMessagesMessageIdPut(messageId, messageUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMessageMessagesMessageIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUsersUserIdPut(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserUsersUserIdPut(userId, userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateUserUsersUserIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload Pdf
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPdfUploadPdfPost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPdfUploadPdfPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadPdfUploadPdfPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Chat
         * @param {string} username 
         * @param {string} vecName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatCreateChatPost(username: string, vecName: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createChatCreateChatPost(username, vecName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Message
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageMessagesPost(messageCreate: MessageCreate, options?: RawAxiosRequestConfig): AxiosPromise<MessageInDB> {
            return localVarFp.createMessageMessagesPost(messageCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserInDB> {
            return localVarFp.createUserUsersPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageMessagesMessageIdDelete(messageId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteMessageMessagesMessageIdDelete(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Pdf
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePdfDeletePdfFilenameDelete(filename: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deletePdfDeletePdfFilenameDelete(filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteUserUsersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Response
         * @param {GetAnswerRequest} getAnswerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponseGetResponsePost(getAnswerRequest: GetAnswerRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getResponseGetResponsePost(getAnswerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Task Status
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatusTaskStatusTaskIdGet(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getTaskStatusTaskStatusTaskIdGet(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getvectorstoreslist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVectorStoresListGetVectorStoresListGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getVectorStoresListGetVectorStoresListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Vectorstore From Files
         * @param {string} vecName Name of the vector storage
         * @param {Array<File>} files 
         * @param {number} [chunkSize] Chunk size for text splitting
         * @param {boolean} [isPublic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVectorstoreFromFilesVectorStorageFromFilesPost(vecName: string, files: Array<File>, chunkSize?: number, isPublic?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getVectorstoreFromFilesVectorStorageFromFilesPost(vecName, files, chunkSize, isPublic, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.loginForAccessTokenTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make Embedding
         * @param {TextRequest} textRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeEmbeddingEmbeddingPost(textRequest: TextRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.makeEmbeddingEmbeddingPost(textRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make Embeddings
         * @param {TextsRequest} textsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeEmbeddingsEmbeddingsPost(textsRequest: TextsRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.makeEmbeddingsEmbeddingsPost(textsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make Llm Answer
         * @param {MessagesRequest} messagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeLlmAnswerLlmAnswerPost(messagesRequest: MessagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.makeLlmAnswerLlmAnswerPost(messagesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Protected Route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        protectedRouteProtectedGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.protectedRouteProtectedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Message
         * @param {number} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMessageMessagesMessageIdGet(messageId: number, options?: RawAxiosRequestConfig): AxiosPromise<MessageInDB> {
            return localVarFp.readMessageMessagesMessageIdGet(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserInDB> {
            return localVarFp.readUserUsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserRegistration} userRegistration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserRegisterPost(userRegistration: UserRegistration, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.registerUserRegisterPost(userRegistration, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Message
         * @param {number} messageId 
         * @param {MessageUpdate} messageUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageMessagesMessageIdPut(messageId: number, messageUpdate: MessageUpdate, options?: RawAxiosRequestConfig): AxiosPromise<MessageInDB> {
            return localVarFp.updateMessageMessagesMessageIdPut(messageId, messageUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersUserIdPut(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<UserInDB> {
            return localVarFp.updateUserUsersUserIdPut(userId, userUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Pdf
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPdfUploadPdfPost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.uploadPdfUploadPdfPost(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Chat
     * @param {string} username 
     * @param {string} vecName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createChatCreateChatPost(username: string, vecName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createChatCreateChatPost(username, vecName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Message
     * @param {MessageCreate} messageCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMessageMessagesPost(messageCreate: MessageCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMessageMessagesPost(messageCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUserUsersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Message
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMessageMessagesMessageIdDelete(messageId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMessageMessagesMessageIdDelete(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Pdf
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePdfDeletePdfFilenameDelete(filename: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePdfDeletePdfFilenameDelete(filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserUsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUserUsersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Response
     * @param {GetAnswerRequest} getAnswerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getResponseGetResponsePost(getAnswerRequest: GetAnswerRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getResponseGetResponsePost(getAnswerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Task Status
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTaskStatusTaskStatusTaskIdGet(taskId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTaskStatusTaskStatusTaskIdGet(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getvectorstoreslist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVectorStoresListGetVectorStoresListGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVectorStoresListGetVectorStoresListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Vectorstore From Files
     * @param {string} vecName Name of the vector storage
     * @param {Array<File>} files 
     * @param {number} [chunkSize] Chunk size for text splitting
     * @param {boolean} [isPublic] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVectorstoreFromFilesVectorStorageFromFilesPost(vecName: string, files: Array<File>, chunkSize?: number, isPublic?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getVectorstoreFromFilesVectorStorageFromFilesPost(vecName, files, chunkSize, isPublic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login For Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginForAccessTokenTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginForAccessTokenTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make Embedding
     * @param {TextRequest} textRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public makeEmbeddingEmbeddingPost(textRequest: TextRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).makeEmbeddingEmbeddingPost(textRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make Embeddings
     * @param {TextsRequest} textsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public makeEmbeddingsEmbeddingsPost(textsRequest: TextsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).makeEmbeddingsEmbeddingsPost(textsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make Llm Answer
     * @param {MessagesRequest} messagesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public makeLlmAnswerLlmAnswerPost(messagesRequest: MessagesRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).makeLlmAnswerLlmAnswerPost(messagesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Protected Route
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public protectedRouteProtectedGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).protectedRouteProtectedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Message
     * @param {number} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMessageMessagesMessageIdGet(messageId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMessageMessagesMessageIdGet(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readUserUsersUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readUserUsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserRegistration} userRegistration 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerUserRegisterPost(userRegistration: UserRegistration, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerUserRegisterPost(userRegistration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Message
     * @param {number} messageId 
     * @param {MessageUpdate} messageUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMessageMessagesMessageIdPut(messageId: number, messageUpdate: MessageUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMessageMessagesMessageIdPut(messageId, messageUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {number} userId 
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserUsersUserIdPut(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUserUsersUserIdPut(userId, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Pdf
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadPdfUploadPdfPost(file: File, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadPdfUploadPdfPost(file, options).then((request) => request(this.axios, this.basePath));
    }
}



